@model WebApplication.Models.MathTask

@{
    ViewBag.Title = "Создать задачу";
}

<div style="margin: 20px">

    @using (Html.BeginForm("Create", "MathTask", FormMethod.Post, new { role = "form", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true)
            <fieldset>
                <legend>Новая задача: выберите одного исполнителя или же целую учебную группу</legend>

                <div id="userType" style="border: 1px solid; padding: 20px; margin: 10px;">
                    <div >
                        <label class="control-label"><input type="checkbox" id="userTypeCheckbox">Индивидуально для студента?</label>
                    </div>

                    <div  id="groupBlock">
                        @Html.LabelFor(model => model.StudentsGroupId, new { })

                        <div>
                            @Html.DropDownListFor(model => model.StudentsGroupId, ViewBag.StudentsGroups as SelectList, "Выберите группу", new { })
                        </div>
                    </div>

                    <div  id="userBlock">
                        @Html.LabelFor(model => model.SelectedExecutorId, new { })

                        <div>
                            @Html.DropDownListFor(model => model.SelectedExecutorId, ViewBag.Users as SelectList, "Выберите исполнителя", new { })
                        </div>
                    </div>
                </div>

                <div id="firstBlock" style="padding: 20px; margin: 10px;">

                    <div >
                        @Html.LabelFor(model => model.Name, new { })

                        <div>
                            @Html.EditorFor(model => model.Name, new { })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div >
                        @Html.LabelFor(model => model.Deadline, new { })

                        <div>
                            @Html.EditorFor(model => model.Deadline, new { })
                            @Html.ValidationMessageFor(model => model.Deadline, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div id="typeOfAutoGenerating" style="border: 1px solid; padding: 20px; margin: 10px;">

                    <div >
                        <label class="control-label"><input type="checkbox" id="autogeneratingCheckBox">Автоматически сгенерированная задачи или загруженная извне?</label>
                    </div>

                    <div id="autogenerating">
                        <div >
                            @Html.LabelFor(model => model.MathTaskTypeId, new { })

                            <div>
                                @Html.DropDownListFor(model => model.MathTaskTypeId, ViewBag.MathTaskTypes as SelectList, new { })
                            </div>
                        </div>

                        <div >
                            @Html.LabelFor(model => model.Level, new { })

                            <div>
                                @Html.DropDownListFor(model => model.Level, ViewBag.Levels as SelectList, new { })
                            </div>
                        </div>
                    </div>

                    <div id="notautogenerating" style="padding: 20px;">

                        <div >
                            @Html.LabelFor(model => model.LatexCode, new { })

                            <div>
                                @Html.TextAreaFor(model => model.LatexCode, 3, 100, new { htmlAttributes = new { } })
                                @Html.ValidationMessageFor(model => model.LatexCode, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div>
                            @Html.Label("Приложенный файл?", new { })
                            <div>
                                <input type="file" class="form-control" id="error" name="error" value="Сохранить файл" />
                            </div>
                        </div>
                    </div>


                </div>


                <div style="padding: 20px; margin: 10px;">
                    
                    <div>
                        @Html.LabelFor(model => model.Description, new {})

                        <div>
                            @Html.TextAreaFor(model => model.Description, 3, 100, new {htmlAttributes = new {}})
                            @Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger"})
                        </div>
                    </div>

                    @Html.LabelFor(model => model.Priority, new {})
                    <div>
                        @Html.DropDownListFor(model => model.Priority, new[]
                        {
                            new SelectListItem() {Text = "Низкий", Value = "1"},
                            new SelectListItem() {Text = "Средний", Value = "2"},
                            new SelectListItem() {Text = "Высокий", Value = "3"},
                            new SelectListItem() {Text = "Критичный", Value = "4"}
                        }, new {})
                    </div>

                    <div style="padding-top: 10px;">
                        @Html.Label("Подтвердить сохранение?", new {})
                        <br/>
                        <input class="buttonS" type="submit" value="Сохранить" width="100"/>
                    </div>
                </div>


                </fieldset>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui");

    <script>


        $('#userTypeCheckbox')
            .click(function (e) {
                console.log("!!")
                invalidate();
            });

        $('#autogeneratingCheckBox')
            .click(function (e) {
                console.log("!!")
                invalidate();
            });

        function invalidate() {

            var isOnlyStudent = document.getElementById('userTypeCheckbox').checked;;

            if (isOnlyStudent) {
                $(document.getElementById('groupBlock')).hide();
                $(document.getElementById('userBlock')).show();
            } else {
                $(document.getElementById('groupBlock')).show();
                $(document.getElementById('userBlock')).hide();
            }

            var isAutoGenerating = document.getElementById('autogeneratingCheckBox').checked;;
         
            if (isAutoGenerating) {
                $(document.getElementById('autogenerating')).show();
                $(document.getElementById('notautogenerating')).hide();
            } else {
                $(document.getElementById('autogenerating')).hide();
                $(document.getElementById('notautogenerating')).show();
            }


        }

        invalidate();
    </script>
}
